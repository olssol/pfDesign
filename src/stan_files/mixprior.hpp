/*
    rstanarm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanarm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanarm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1

#include <stan/model/model_header.hpp>

namespace model_mixprior_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_mixprior");
    reader.add_event(76, 74, "end", "model_mixprior");
    return reader;
}

template <typename T0__, typename T2__>
typename boost::math::tools::promote_args<T0__, T2__>::type
icdf(const T0__& p,
         const int& nsmp,
         const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& smp, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 5;
        local_scalar_t__ rst(DUMMY_VAR__);
        (void) rst;  // dummy to suppress unused var warning
        stan::math::initialize(rst, DUMMY_VAR__);
        stan::math::fill(rst, DUMMY_VAR__);

        current_statement_begin__ = 6;
        int low(0);
        (void) low;  // dummy to suppress unused var warning
        stan::math::fill(low, std::numeric_limits<int>::min());
        stan::math::assign(low,1);

        current_statement_begin__ = 7;
        int up(0);
        (void) up;  // dummy to suppress unused var warning
        stan::math::fill(up, std::numeric_limits<int>::min());
        stan::math::assign(up,nsmp);

        current_statement_begin__ = 8;
        int mid(0);
        (void) mid;  // dummy to suppress unused var warning
        stan::math::fill(mid, std::numeric_limits<int>::min());


        current_statement_begin__ = 10;
        while (as_bool(logical_gt(up, (low + 1)))) {

            current_statement_begin__ = 11;
            stan::math::assign(mid, divide((low + up), 2));
            current_statement_begin__ = 12;
            if (as_bool(logical_gt(get_base1(smp, mid, "smp", 1), p))) {

                current_statement_begin__ = 13;
                stan::math::assign(up, mid);
            } else {

                current_statement_begin__ = 15;
                stan::math::assign(low, mid);
            }
        }
        current_statement_begin__ = 35;
        stan::math::assign(rst, ((1.0 * low) / nsmp));
        current_statement_begin__ = 36;
        return stan::math::promote_scalar<fun_return_scalar_t__>(rst);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct icdf_functor__ {
    template <typename T0__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T2__>::type
    operator()(const T0__& p,
         const int& nsmp,
         const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& smp, std::ostream* pstream__) const {
        return icdf(p, nsmp, smp, pstream__);
    }
};

template <typename T0__, typename T2__>
typename boost::math::tools::promote_args<T0__, T2__>::type
icdf2(const T0__& p,
          const int& nsmp,
          const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& smp, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 40;
        local_scalar_t__ rst(DUMMY_VAR__);
        (void) rst;  // dummy to suppress unused var warning
        stan::math::initialize(rst, DUMMY_VAR__);
        stan::math::fill(rst, DUMMY_VAR__);

        current_statement_begin__ = 41;
        local_scalar_t__ l(DUMMY_VAR__);
        (void) l;  // dummy to suppress unused var warning
        stan::math::initialize(l, DUMMY_VAR__);
        stan::math::fill(l, DUMMY_VAR__);

        current_statement_begin__ = 42;
        validate_non_negative_index("vv", "(nsmp + 1)", (nsmp + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> vv((nsmp + 1));
        stan::math::initialize(vv, DUMMY_VAR__);
        stan::math::fill(vv, DUMMY_VAR__);


        current_statement_begin__ = 43;
        stan::math::assign(vv, append_row(p, smp));
        current_statement_begin__ = 44;
        stan::math::assign(l, rank(vv, 1));
        current_statement_begin__ = 45;
        stan::math::assign(rst, (l / nsmp));
        current_statement_begin__ = 46;
        return stan::math::promote_scalar<fun_return_scalar_t__>(rst);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct icdf2_functor__ {
    template <typename T0__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T2__>::type
    operator()(const T0__& p,
          const int& nsmp,
          const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& smp, std::ostream* pstream__) const {
        return icdf2(p, nsmp, smp, pstream__);
    }
};

#include <meta_header.hpp>
 class model_mixprior : public prob_grad {
private:
        int N;
        int Y;
        int NSMP;
        vector_d SMP;
public:
    model_mixprior(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_mixprior(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_mixprior_namespace::model_mixprior";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 52;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);

            current_statement_begin__ = 53;
            context__.validate_dims("data initialization", "Y", "int", context__.to_vec());
            Y = int(0);
            vals_i__ = context__.vals_i("Y");
            pos__ = 0;
            Y = vals_i__[pos__++];
            check_greater_or_equal(function__, "Y", Y, 0);

            current_statement_begin__ = 55;
            context__.validate_dims("data initialization", "NSMP", "int", context__.to_vec());
            NSMP = int(0);
            vals_i__ = context__.vals_i("NSMP");
            pos__ = 0;
            NSMP = vals_i__[pos__++];
            check_greater_or_equal(function__, "NSMP", NSMP, 1);

            current_statement_begin__ = 56;
            validate_non_negative_index("SMP", "NSMP", NSMP);
            context__.validate_dims("data initialization", "SMP", "vector_d", context__.to_vec(NSMP));
            SMP = Eigen::Matrix<double, Eigen::Dynamic, 1>(NSMP);
            vals_r__ = context__.vals_r("SMP");
            pos__ = 0;
            size_t SMP_j_1_max__ = NSMP;
            for (size_t j_1__ = 0; j_1__ < SMP_j_1_max__; ++j_1__) {
                SMP(j_1__) = vals_r__[pos__++];
            }


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 60;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_mixprior() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 60;
        if (!(context__.contains_r("p")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "p", "double", context__.to_vec());
        double p(0);
        p = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, p);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 60;
            local_scalar_t__ p;
            (void) p;  // dummy to suppress unused var warning
            if (jacobian__)
                p = in__.scalar_lub_constrain(0, 1, lp__);
            else
                p = in__.scalar_lub_constrain(0, 1);

            // transformed parameters
            current_statement_begin__ = 64;
            local_scalar_t__ theta;
            (void) theta;  // dummy to suppress unused var warning
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            stan::math::assign(theta,icdf(p, NSMP, SMP, pstream__));

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 64;
            if (stan::math::is_uninitialized(theta)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: theta";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }

            // model body

            current_statement_begin__ = 69;
            lp_accum__.add(uniform_log(p, 0, 1));
            current_statement_begin__ = 70;
            lp_accum__.add(binomial_log(Y, N, theta));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("p");
        names__.push_back("theta");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_mixprior_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        double p = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(p);

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 64;
            double theta;
            (void) theta;  // dummy to suppress unused var warning
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            stan::math::assign(theta,icdf(p, NSMP, SMP, pstream__));

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(theta);
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_mixprior";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "p";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta";
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "p";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta";
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef model_mixprior_namespace::model_mixprior stan_model;


#endif
